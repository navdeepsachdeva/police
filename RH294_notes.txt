Welcome to RH294 

RHEL 8.4
Ansible 2.9



Name:
Company:
Experience:
	Red Hat Certified System Administrator (EX200/RHCSA) certification or equivalent Red Hat Enterprise Linux knowledge and
	experience.
	vim cp mv rm mkdir ssh firewall-cmd
Expectation:
Hobbies:





Chapter 1:

Ansible Playbook/ IAC

Remote Manual Tasks
History of changes/Proper Documentation
Integrate Multiple Team work



Integrate Multiple Playbooks
Oracle TEAM
Security
Firewall
Admin team

Follow DIagram
yum install ansible -y


Chapter 2: 

Inventory:
	static inventory:
		Default: /etc/ansible/hosts
		custom: ansible group_name/all/ungrouped/host --list-hosts -i Inventory_File_Path
		
		
	IP and Hostname are treated as 2 different systems, even though it is same system
	groups:   
		Default groups:  all ungrouped
		Custom Groups:   Named Groups

	Ansible configuration File:

		ansible --version

	Default File:		/etc/ansible/ansible.cfg			Level 1
	User file(Home Dir):	~/.ansible.cfg					Level 2		// Hidden File
	Project specific:	./ansible.cfg					Level 3		// Current Folder
	Define Env Variable:	ANSIBLE_CONFIG      #=/tmp/ansible.config	Level 4

YAML Format:
   Option_NAME: value
   
INI/AD-HOC Format:
   Option_NAME=value

ansible 192.168.2.[/6-8] --list-hosts -i jordi_hosts

ANSIBLE_STDOUT_CALLBACK=yaml ansible-playbook abc.yaml

Process of Execution AD-hoc/Playbook
1. Find ansible.cfg path
2. Read that ansible.cfg
3. findout parameters based on ansible.cfg e.q. inventory

FOR ansible, IP/hostname/FQDN are different systems, it has no machanism touse ARP protocol to figure out that they are same system.
play.yml
servera				NOT Desired/ Make Changes
servera.lab.example.com		Desired/NO Changes
172.25.250.10			Desired/NO Changes


Two host groups always exist:
System Defined groups:  all,ungrouped
User Defined Groups:  YOUR_NAMES_PLEASE


Special Modules ( DO NOT USE THESE MODULES UNTIL YOU HAVE TO )

these 3 modules are NOT idempotent [DO NOT check current state]
1. command
2. shell
3. raw: IF python NOT available on Managed Hosts, DIRTY LOW LEVEL execution of python installation on Managed Hosts


vim ~/.vimrc
  autocmd FileType yaml setlocal ai ts=2 sw=2 et cuc
  

ai : autoindent - copy the previous line's indentation
ts=2 : tabstop - set the number of spaces that the Tab key uses, when pressed
sw=2 : shiftwidth - number of spaces to use with autoindent
et : expandtab - use the space character as whitespace instead of Tab
cuc : cursorcolumn - highlight the column the cursor is on



Playbook should follow 3 step

				###############  Instructions to Run Playbook ###############


###############  Step 1:  Check Syntax of Playbook ###############

ansible-navigator run -m stdout install_httpd.yml --syntax-check

ansible-playbook install_httpd.yml --syntax-check


###############  Step 2:  Run Playbook in Simulation Mode (DRY RUN Or Prediction or Matrix Oracle) ###############
###############  Step 2:  This Step only check in playbook if tasks will make any changes in managed hosts or not if run in real mode ###############


ansible-navigator run -m stdout install_httpd.yml --check
ansible-playbook install_httpd.yml --check

				#### OR ####
ansible-navigator run -m stdout install_httpd.yml -C
ansible-playbook install_httpd.yml -C


###############  Step 3:  Run Playbook in Real Mode ###############

ansible-navigator run -m stdout install_httpd.yml 
ansible-navigator run -m stdout install_httpd.yml --step  ## LOOKS GOOD AND COOL


ansible-playbook install_httpd.yml 
ansible-playbook install_httpd.yml --step  ## LOOKS GOOD AND COOL



@@ USEFUL Command
 ansible-playbook first.yml --check --limit servera --start-at-task="Content in file" --diff --step

Flow:
ansible.cfg -> Knows other parameters (Inventory,esclation) -> Inventory File(Must have hosts of playbook) -> playbook


FOR COPY and PASTE in vim
esc
:set paste
paste the content

esc
:set nopaste


Chapter 3: 

Scope of Variables:

Ansible Config Scope: in ansible.cfg/command line inbuild ansible paramters

	## 	Variable Scope:		##
	
Role Scope:	In roles structure (defaults/main.yml and vars/main.yml)
Host Scope:	Inventory where hosts are defined
Play Scope:	In Playbook
Global Scope:	Command Line  OR RUN Time

		Scope of Variables:
Host Scope <  Play Scope  < Global Scope


1.	Host Scope		// Inventory File , group_vars, host_vars

	A.	Group_inventory: 		inventory File_ group variable		use = symbol (if using ini format inventory)
											[groupname:vars]
											var1="somevalue"
		
	B.	Group_group_vars_folder: 	group_vars/{{groupname}}(.yml)		use : symbol
			
	C.	host inventory variable		use = symbol
	D.	host_vars folder		host_vars/{{servername}}.yml		use : symbol


2. 	Play Scope (Playbook)
	A.	vars:
	B. 	Vars_Prompt:	// prompt user to enter value //Interactive // Good for Development Env
		
	C.	vars_files:
		- file_path
		
	D:	Task Scope:
		vars:
		  variable_name: "Value"  ## For that Specific Task
	E. 	Set Fact
			set_fact:
			  var1: "Some value you want to override"	
3.	Global Scope (Command Line Values)
	A.	ansible-playbook abc.yml -e 'var_name=some_value var2=someValue2 var3=someValue3' 
	
	
	
Ansible Vault:
		Create/Encrypt File:

ansible-vault create secret.yml							//new File Interactive
ansible-vault create secret.yml	--vault-password-file=somepass.txt		//new File // Non Interactive
ansible-vault encrypt secret.yml						//Existing File Prompt File already Exist
ansible-vault encrypt secret.yml --vault-password-file=somepass.txt		//Existing File from some file Non Interactive
ansible-vault view secret.yml							//see File ## vim will not work
ansible-vault view secret.yml 	--vault-password-file=somepass.txt		//see File ## NON Interactive
ansible-vault decrypt secret.yml --output=without_secret.yml			//decrypt File
ansible-vault edit secret.yml							//change contents File Interactive
ansible-vault edit secret.yml --vault-password-file=somepass.txt		//change contents File NON Interactive
ansible-vault rekey secret.yml 							//change current password to new one
ansible-vault rekey secret.yml 	--vault-password-file=pass1.txt --new-vault-password-file=pass2.txt //Non-Interactive
ansible-vault encrypt_string vyos						//Encrypt password

		Run a Encrypted File:
ansible-navigator run -m stdout secret.yml --ask-vault-pass			//single password on all files //Interactive
ansible-navigator run -m stdout secret.yml --vault-password-file=pass1.txt	//single password on all files //Non-Interactive

ansible-playbook secret.yml --ask-vault-pass			//single password on all files //Interactive
ansible-playbook secret.yml --vault-password-file=pass1.txt	//single password on all files //Non-Interactive

	## Default Password File ##
vim ansible.cfg
[defaults]
vault_password_file=PATH/pass1.txt

	//Multiple password on one file
	
ansible-navigator run -m stdout secret.yml --vault-id 1@prompt --vault-id 2@prompt --vault-id 3@prompt --vault-id 4@prompt
ansible-navigator run -m stdout secret.yml --vault-id 1@prompt --vault-id 2@prompt --vault-id 3@pass1.txt --vault-id 4@pass2.txt

ansible-playbook secret.yml --vault-id 1@prompt --vault-id 2@prompt --vault-id 3@prompt --vault-id 4@prompt
ansible-playbook secret.yml --vault-id 1@prompt --vault-id 2@prompt --vault-id 3@pass1.txt --vault-id 4@pass2.txt


## Fact ##
System Variable is Ansible FACT i.e. OS, OS Version, RAM, HDD



Chapter 4:

Tasks:
- name: Print
  debug:
    msg: "eth{{item}}"
  with_sequence: start=0 end=5
 
- name: Print
  debug:
    msg: "{{item}}"
  with_fileglob: 
  - "/etc/ssh/*"



	##  Handling Task Failure  ##
	
ignore_errors: Carry one with next tasks if any task fails
force_handlers: Run the invoked handlers by previous task in case of failure of next task 
failed_when: fail the task manually if output is NOT expected
changed_when: change status of task from OK to CHANGED so that we can invoke handlers


block:

try 		block
catch 		rescue
finally		always

ROLLBACK of tasks

Chapter 6:


	Import						Include
	static inlucsion of tasks/			Dynamic inlucsion of tasks/
	Task avaiable at pre-processing time		Task avaiable at Runtime/execution time


Import (import_tasks, import_role)
static inclusion of tasks(you know tasks in advance)
ansible-playbook abc.yml --syntax-check    ## also check syntax of imported Task file
4  task in external file ## Condition checked on all task one by one although condition is false
--start-at-task can be used to start execution of playbook at certain point
Might take more time
for Development Environment
Can not loop for importing files

include (include_tasks, include_role)
Dynamic inclusion of tasks(you DO NOT know tasks in advance)
ansible-playbook abc.yml --syntax-check    ## DOES NOT check syntax of included Task file
4  task in external file ## Condition checked only once, if false file tasks are not included in execution of playbook
--start-at-task does n't work as task names are NOT known in advance
Time efficient
for Production Environment
Can loop for including files

import_playbook: playbook can only be imported NOT included



Chapter7:

Reusability/ROLE

Trivial Copy:
1. for Sender: Security Issue for sharing variables,hosts, users,passwords
2. for receiver: Unserdtand the whole big playbook, change accodingly, too many tasks for many issues (oracle,web,network,security) 


task/other things only for specific purpose
e.g. Webserver/FTPServer/Load Balancer

security_role

roles:
  role: Webserver

Section 2: Private Role/organisational Role/Custom Roles
Section 3: Public Roles/Ansible Galaxy/No Support
Section 4: Redhat Subscribed Roles/Support

defaults: 	define variables in main.yml
vars:		define variables in main.yml but highter priority than defaults
tasks:		TASK file, write tasks in main.yml 
handlers:	define handlers in main.yml which will be invoked by tasks in main.yml
meta:		Define Dependency roles
templates:	only template files .j2




1. Pre Tasks:
2. Pre Tasks Notified Handlers

3. Call Dependency Role Tasks First
4. Call Main Role Tasks 
5. Playbook Extra Tasks

6. Run Dependency Role Handler
7. Run Main  Role Handler
8. Playbook Handler

9. Post Tasks
10.Post Tasks Notfied Handlers

Private Roles	OWN		/home/student/.ansible/roles:Custom_Path
Redhat Roles	Paid		/usr/share/ansible/roles
Ansible Galaxy	Free		/etc/ansible/roles
			./roles

Redhat Roles:
Install package: rhel-system-roles
Install Collection: 

Chapter 8: 

Check Mode:
Tries to predict/simulation final execution but doesn't make any change
If a task has check_mode: true set, it always runs in its check mode and does not
perform any action, even if you do not pass the --check option to ansible-navigator.
Assume 4 tasks:

third task is dependent on first task
Run first Task in READ Mode and rest in check mode.







Scripts are written in Python normally. bash 
https://github.com/ansible/ansible/tree/stable-2.9/contrib/inventory
https://docs.ansible.com/ansible/latest/inventory_guide/intro_patterns.html








Parallelism CI/CD

	forks					serial
	ansible.cfg				playbook file
	command line --forks			NA
	Task by Task				Host by Host/Play by Play
	Manage load on Control Node		Control no of hosts updating at same time 
	(Manage number of Threads)



		######## EXTRA Topic #########

Forks: 

inventory 11
Playbook: 4 tasks
## Default forks=5
forks=4		Horizontal Direction

	S1	S2	S3	S4		S5	S6	S7	S8		S9 	S10	S11
	T1	T1	T1	T1		T1	T1	T1	T1		T1	T1	T1
	T2	T2	T2	T2		T2	T2	T2	T2		T2	T2	T2
	T3	T3	T3	T3		T3	T3	T3	T3		T3	T3	T3
	T4	T4	T4	T4		T4	T4	T4	T4		T4	T4	T4
	
Serial: 3 
Vertical Direction
	S1	S2	S3			S4	S5	S6		S7	S8	S9	 	S10	S11
	T1	T1	T1			T1	T1	T1		T1	T1	T1		T1	T1
	T2	T2	T2			T2	T2	T2		T2	T2	T2		T2	T2
	T3	T3	T3			T3	T3	T3		T3	T3	T3		T3	T3
	T4	T4	T4			T4	T4	T4		T4	T4	T4		T4	T4
	

Sorting your inventory

https://docs.ansible.com/ansible/latest/user_guide/playbooks_intro.html


	
Tags:
System Tags:  	all (default), always, never, untagged
User rags:	User named tags
